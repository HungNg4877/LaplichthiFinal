# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Xulyrangbuoc.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem,QMainWindow, QMessageBox
import pandas as pd
import numpy 
import math


class Ui_MainWindow(QMainWindow):
        def __init__(self):
                super().__init__()
                self.df_sv2ct = None
                self.df_hptt=None
                self.df_svthihk=None
                self.df_svthihkHPTT=None
                self.df_svthihk2CT=None
                self.df_svthihkTL=None
                self.df_svthihkmienTA=None
                self.df_svthihkTH=None
                self.df_svthihkHPTA=None
        def setupUi(self, MainWindow): # phương thức của lớp ui_mainwindow được sử dụng để cấu hình giao diện
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(1771, 824)
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.Header = QtWidgets.QWidget(self.centralwidget)
                self.Header.setGeometry(QtCore.QRect(10, 0, 1751, 151))
                self.Header.setStyleSheet("background-color: rgb(240,248,255);\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px ;")
                self.Header.setObjectName("Header")
                self.label = QtWidgets.QLabel(self.Header)
                self.label.setGeometry(QtCore.QRect(20, 10, 121, 121))
                self.label.setMinimumSize(QtCore.QSize(50, 50))
                self.label.setStyleSheet("    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.label.setText("")
                self.label.setPixmap(QtGui.QPixmap(":/images/Logo-DH-Kinh-te-Dai-hoc-Da-Nang-DUE.png"))
                self.label.setScaledContents(True)
                self.label.setObjectName("label")
                self.pushButton_2 = QtWidgets.QPushButton(self.Header)
                self.pushButton_2.setGeometry(QtCore.QRect(1690, 10, 61, 28))
                self.pushButton_2.setText("")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap(":/images/notify_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.pushButton_2.setIcon(icon)
                self.pushButton_2.setObjectName("pushButton_2")
                self.pushButton_3 = QtWidgets.QPushButton(self.Header)
                self.pushButton_3.setGeometry(QtCore.QRect(1630, 10, 61, 28))
                self.pushButton_3.setText("")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap(":/images/profile.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.pushButton_3.setIcon(icon1)
                self.pushButton_3.setObjectName("pushButton_3")
                self.ChonDL = QtWidgets.QPushButton(self.Header)
                self.ChonDL.setGeometry(QtCore.QRect(180, 40, 311, 81))
                self.ChonDL.setStyleSheet("font: 16pt \"MS Shell Dlg 2\";\n"
        "    background-color: rgb(248, 248, 248);\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px ;")
                self.ChonDL.setObjectName("ChonDL")
                self.widget_3 = QtWidgets.QWidget(self.centralwidget)
                self.widget_3.setGeometry(QtCore.QRect(0, 140, 1771, 661))
                self.widget_3.setStyleSheet("")
                self.widget_3.setObjectName("widget_3")
                self.widget = QtWidgets.QWidget(self.widget_3)
                self.widget.setGeometry(QtCore.QRect(10, 20, 1751, 651))
                self.widget.setStyleSheet("background-color: rgb(240,248,255);\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px ;")
                self.widget.setObjectName("widget")
                self.textEdit = QtWidgets.QTextEdit(self.widget)
                self.textEdit.setGeometry(QtCore.QRect(840, 10, 901, 611))
                self.textEdit.setStyleSheet("background-color: rgb(248, 248, 248);\n"
        "    border-width: 2px;  \n"
        "    border-style: solid;\n"
        "border-radius: 10px;")
                self.textEdit.setObjectName("textEdit")
                self.XLDLTL = QtWidgets.QPushButton(self.widget)
                self.XLDLTL.setGeometry(QtCore.QRect(40, 100, 381, 51))
                self.XLDLTL.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";\n"
        "background-color: rgb(248, 248, 248);\n"
        "\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLDLTL.setObjectName("XLDLTL")
                self.XuatraXLDLTL = QtWidgets.QPushButton(self.widget)
                self.XuatraXLDLTL.setGeometry(QtCore.QRect(420, 100, 401, 51))
                self.XuatraXLDLTL.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraXLDLTL.setObjectName("XuatraXLDLTL")
                self.XLHPTT = QtWidgets.QPushButton(self.widget)
                self.XLHPTT.setGeometry(QtCore.QRect(40, 160, 381, 51))
                self.XLHPTT.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLHPTT.setObjectName("XLHPTT")
                self.XuatraHPTT = QtWidgets.QPushButton(self.widget)
                self.XuatraHPTT.setGeometry(QtCore.QRect(420, 160, 401, 51))
                self.XuatraHPTT.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraHPTT.setObjectName("XuatraHPTT")
                self.XLSV2CT = QtWidgets.QPushButton(self.widget)
                self.XLSV2CT.setGeometry(QtCore.QRect(40, 220, 381, 51))
                self.XLSV2CT.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLSV2CT.setObjectName("XLSV2CT")
                self.XuatraSV2CT = QtWidgets.QPushButton(self.widget)
                self.XuatraSV2CT.setGeometry(QtCore.QRect(420, 220, 401, 51))
                self.XuatraSV2CT.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraSV2CT.setObjectName("XuatraSV2CT")
                self.XLHPTA = QtWidgets.QPushButton(self.widget)
                self.XLHPTA.setGeometry(QtCore.QRect(40, 280, 381, 51))
                self.XLHPTA.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLHPTA.setObjectName("XLHPTA")
                self.XuatraHPTA = QtWidgets.QPushButton(self.widget)
                self.XuatraHPTA.setGeometry(QtCore.QRect(420, 280, 401, 51))
                self.XuatraHPTA.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraHPTA.setObjectName("XuatraHPTA")
                self.XLmienTA = QtWidgets.QPushButton(self.widget)
                self.XLmienTA.setGeometry(QtCore.QRect(40, 340, 381, 51))
                self.XLmienTA.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLmienTA.setObjectName("XLmienTA")
                self.XuatraSVmienTA = QtWidgets.QPushButton(self.widget)
                self.XuatraSVmienTA.setGeometry(QtCore.QRect(420, 340, 401, 51))
                self.XuatraSVmienTA.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraSVmienTA.setObjectName("XuatraSVmienTA")
                self.XLSVrutHP = QtWidgets.QPushButton(self.widget)
                self.XLSVrutHP.setGeometry(QtCore.QRect(40, 400, 381, 51))
                self.XLSVrutHP.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLSVrutHP.setObjectName("XLSVrutHP")
                self.XuatraSVRHP = QtWidgets.QPushButton(self.widget)
                self.XuatraSVRHP.setGeometry(QtCore.QRect(420, 400, 401, 51))
                self.XuatraSVRHP.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraSVRHP.setObjectName("XuatraSVRHP")
                self.XLCBDL = QtWidgets.QPushButton(self.widget)
                self.XLCBDL.setGeometry(QtCore.QRect(40, 460, 381, 51))
                self.XLCBDL.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XLCBDL.setObjectName("XLCBDL")
                self.XuatraCBDL = QtWidgets.QPushButton(self.widget)
                self.XuatraCBDL.setGeometry(QtCore.QRect(420, 460, 401, 51))
                self.XuatraCBDL.setStyleSheet("background-color: rgb(248, 248, 248);font: 12pt \"MS Shell Dlg 2\";\n"
        "    border: 2px solid black;\n"
        "    border-radius: 10px;")
                self.XuatraCBDL.setObjectName("XuatraCBDL")
                MainWindow.setCentralWidget(self.centralwidget)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)
                
        # Đặt kích thước chữ cho textEdit
                font = self.textEdit.font()
                font.setPointSize(16)  # Thay đổi kích thước chữ ở đây (ví dụ: 14)
                self.textEdit.setFont(font)
                #
                self.ChonDL.clicked.connect(self.Load_data)
                #
                self.XLDLTL.clicked.connect(self.show_result_XLTL)
                self.XuatraXLDLTL.clicked.connect(self.save_data_XLTL)
                
                self.XLHPTT.clicked.connect(self.show_result_HPTT)
                self.XuatraHPTT.clicked.connect(self.save_data_hptt)
                #

                self.XLSV2CT.clicked.connect(self.show_result_SV_2_CT)
                self.XuatraSV2CT.clicked.connect(self.save_data_sv2ct)
                #
                self.XLHPTA.clicked.connect(self.show_result_process_HPTA)
                self.XuatraHPTA.clicked.connect(self.save_data_hpta)
                #
                self.XLmienTA.clicked.connect(self.show_result_SV_mienTA)
                self.XuatraSVmienTA.clicked.connect(self.save_data_svmienTA)
                #
                self.XLSVrutHP.clicked.connect(self.show_result_SV_thoi_hoc)
                self.XuatraSVRHP.clicked.connect(self.save_data_svth)
                #
                self.XLCBDL.clicked.connect(self.show_result_CBDL)
                self.XuatraCBDL.clicked.connect(self.save_data_CBDL)
                
                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)
        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.ChonDL.setText(_translate("MainWindow", "Chọn tập tin đầu vào"))
                self.XuatraHPTT.setText(_translate("MainWindow", "Xuất ra tập tin xử lý học phần thay thế"))
                self.XLHPTT.setText(_translate("MainWindow", "2. Xử lý học phần thay thế"))
                self.XuatraSV2CT.setText(_translate("MainWindow", "Xuất ra tập tin sinh viên học 2 chương trình"))
                self.XLSV2CT.setText(_translate("MainWindow", "3. Xử lý học sinh viên 2 chương trình"))
                self.XuatraHPTA.setText(_translate("MainWindow", "Xuất ra tập tin xử lý học phần thi Tiếng Anh"))
                self.XLHPTA.setText(_translate("MainWindow", "4. Xử lý học phần thi Tiếng Anh"))
                self.XuatraSVmienTA.setText(_translate("MainWindow", "Xuất ra tập tin xử lý miễn điểm Tiếng Anh"))
                self.XLmienTA.setText(_translate("MainWindow", "5. Xử lý miễn điểm Tiếng Anh"))
                self.XuatraSVRHP.setText(_translate("MainWindow", "Xuất ra tập tin xử lý sinh viên rút học phần"))
                self.XLSVrutHP.setText(_translate("MainWindow", "6. Xử lý sinh viên rút học phần"))
                self.XuatraCBDL.setText(_translate("MainWindow", "Xuất ra tập tin chuẩn bị dữ liệu"))
                self.XLCBDL.setText(_translate("MainWindow", "Thực hiện chuẩn bị dữ liệu"))
                self.XuatraXLDLTL.setText(_translate("MainWindow", "Xuất ra tập tin xử lý dữ liệu trùng lặp"))
                self.XLDLTL.setText(_translate("MainWindow", "1. Xử lý dữ liệu bị trùng lặp"))
        
        def Load_data(self):
                # Mở hộp thoại để chọn tập tin df_1
                file_dialog = QFileDialog()
                file_path_1, _ = file_dialog.getOpenFileName(None, "Chọn file dữ liệu sinh viên đăng ký thi học kì", "", "Excel Files (*.xlsx *.xls)")
                if not file_path_1:
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn tập tin.")
                        return
                self.df_svthihk= pd.read_excel(file_path_1)
                
                file_path_2, _ = file_dialog.getOpenFileName(None, "Chọn file dữ liệu sinh viên học 2 chương trình ", "", "Excel Files (*.xlsx *.xls)")

                self.df_sv2ct= pd.read_excel(file_path_2)

                file_path_3, _ = file_dialog.getOpenFileName(None, "Chọn file dữ liệu học phần thay thế ", "", "Excel Files (*.xlsx *.xls)")
 
                self.df_hptt= pd.read_excel(file_path_3)
                #self -> ám chỉ đối tượng đang làm việc


        def XLTL(self,df_svthihk):
                df_svthihk = df_svthihk.drop_duplicates(subset=['MSV', 'Mã học phần'], keep='first')
                return df_svthihk
        def show_result_XLTL(self):
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                self.textEdit.clear()
                self.df_svthihkTL=self.XLTL(self.df_svthihk)#
                # Nhóm dữ liệu theo cột 'MSV' và 'MHP', sau đó đếm số lượng dòng trong mỗi nhóm
                duplicate_schedule = self.df_svthihk.groupby(['MSV', 'Mã học phần']).size().reset_index(name='Count')

                # Lọc ra các nhóm có số lượng dòng lớn hơn 1, tức là các MSV bị trùng lịch thi
                duplicated_students = duplicate_schedule[duplicate_schedule['Count'] > 1]
                duplicated_students_values = duplicated_students[['MSV', 'Mã học phần']].values.tolist()
    
                self.textEdit.insertPlainText(f"Tổng số dòng bị trùng lặp đã được xử lý: {len(duplicated_students_values)}\n")
                stt=1
                for msv,mhp in duplicated_students_values:
                     self.textEdit.insertPlainText(f"{stt}. Mã sinh viên: {msv}, Đăng ký mã học phần: {mhp} bị trùng lặp dữ liệu\n")
                     stt+=1   
                self.textEdit.insertPlainText("\n") 
        def save_data_XLTL(self):
                                # Kiểm tra xem df_sv2ct và df_2 đã được khởi tạo chưa
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihkTL is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiện xử lý dữ liệu trùng lặp")
                        return
                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")

                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return

                # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihkTL.to_excel(file_path, index=False)
        def process_SV_2_CT(self,df_svthihk,df_sv2ct):
                # Xử lý các giá trị nan và đổi kiểu dữ liệu của cột sang int
                df_svthihk['MSV mở rộng'] = df_svthihk['MSV'].copy()
                
                df_sv2ct['MSV_CT1'] = df_sv2ct['MSV_CT1'].fillna(0).astype(int)
                # Tạo danh sách các MSV CT 1 từ df2
                msv_ct1_values = set(df_sv2ct['MSV_CT1'])
                # Tạo từ điển mapping giữa MSV CT 1 và MSV CT 2
                msv_mapping = dict(zip(df_sv2ct['MSV_CT1'], df_sv2ct['MSV_CT2']))
                # # Tạo danh sách các MSV ở df1 trùng với MSV CT1
                # condition = df_sv2ct['MSV'].isin(msv_ct1_values)
                # # Cập nhật vào cột Ghi chú 2
                # # df_sv2ct.loc[condition, 'Ghi chú 2'] = df_sv2ct.loc[condition, 'MSV'].map(lambda x: f"MSV_CT1: {x}")
                # Cập nhật trong MSV ở df1
                df_svthihk['MSV mở rộng'] = df_svthihk['MSV mở rộng'].apply(lambda x: msv_mapping[x] if x in msv_ct1_values else x)
                return df_svthihk
        def show_result_SV_2_CT(self):
                
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                self.textEdit.clear()
                self.df_svthihk2CT=self.process_SV_2_CT(self.df_svthihk,self.df_sv2ct)
                self.df_sv2ct['MSV_CT1'] = self.df_sv2ct['MSV_CT1'].fillna(0).astype(int)
                msv_ct1_values = self.df_sv2ct[self.df_sv2ct['MSV_CT1'] != 0]['MSV_CT1'].tolist()
                msv_len=len(msv_ct1_values)
                msv_ct2_values = self.df_sv2ct[self.df_sv2ct['MSV_CT1'] != 0]['MSV_CT2'].tolist()
                stt=1
                # Hiển thị kết quả
                self.textEdit.insertPlainText(f"Tổng số sinh viên học 2 chương trình đã được xử lý: {msv_len}\n")
                self.textEdit.insertPlainText("Danh sách mã sinh viên 2 chương trình đã được xử lý:\n")
                for msv_ct_1, msv_ct_2 in zip(msv_ct1_values, msv_ct2_values):
                        self.textEdit.insertPlainText(f"{stt}. Mã sinh viên chương trình 1: {msv_ct_1} đã được gộp và đổi thành thành mã sinh viên chương trình 2: {msv_ct_2}\n")

                        stt+=1
                # Xuống dòng sau khi kết thúc thông tin về mỗi ngày thi
                
                self.textEdit.insertPlainText("\n") 
        
        def save_data_sv2ct(self):
                # Kiểm tra xem df_sv2ct và df_2 đã được khởi tạo chưa
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihk2CT is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiện xử lý sinh viên 2 chương trình")
                        return

                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")

                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return
                

                # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihk2CT.to_excel(file_path, index=False)
                
        def process_HPTT(self,df_svthihk,df_hptt):
                # Tạo danh sách các mã học phần cũ ở cột MHP ở df3
                df_svthihk['Mã học phần mở rộng']=df_svthihk['Mã học phần'].copy()
                mhp_old = set(df_hptt['Mã học phần'])
                # Tạo từ điển mapping giữa mã học phần cũ và mã học phần thay thế
                mhptt_mapping = dict(zip(df_hptt['Mã học phần'], df_hptt['Mã học phần thay thế']))
                # Tạo danh sách các mã học phần ở df1 trùng với mã học phần cũ
                conditon = df_svthihk['Mã học phần'].isin(mhp_old)
                # Cập nhật vào cột Ghi chú ở df1 
                df_svthihk.loc[conditon, 'Ghi chú'] = df_svthihk.loc[conditon, 'Mã học phần'].map(lambda x: f"Mã học phần cũ: {x}")
                # Cập nhật trong cột Mã học phần ở df1
                df_svthihk['Mã học phần mở rộng'] = df_svthihk['Mã học phần'].apply(lambda x: mhptt_mapping[x] if x in mhp_old else x)
                return df_svthihk
        
        def show_result_HPTT(self):
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                self.textEdit.clear()
                self.df_svthihkHPTT=self.process_HPTT(self.df_svthihk,self.df_hptt)
                if self.df_hptt is None:
                        print("Dữ liệu chưa được tải")
                        return
                mhp_old = self.df_hptt['Mã học phần'].tolist()
                mhp_old_len=len(mhp_old)
                mhptt = self.df_hptt['Mã học phần thay thế'].tolist()
                stt=1
                # Hiển thị kết quả
                self.textEdit.insertPlainText(f"Tổng số học phần thay thế đã được xử lý: {mhp_old_len}\n")
                self.textEdit.insertPlainText("Danh sách mã học phần thay thế đã được xử lý:\n")
                for mhp, mhp_tt in zip(mhp_old, mhptt):
                        self.textEdit.insertPlainText(f"{stt}. Mã học phần: {mhp} đã được đổi tên thành mã học phần thay thế: {mhp_tt}\n")

                        stt+=1
                # Xuống dòng sau khi kết thúc thông tin về mỗi ngày thi
                
                self.textEdit.insertPlainText("\n") 
                
        def save_data_hptt(self):
                # Kiểm tra xem df_sv2ct và df_2 đã được khởi tạo chưa
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihkHPTT is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiện xử lý học phần thay thế")
                        return

                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")
                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return


                # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihkHPTT.to_excel(file_path, index=False)
 
        def process_sv_thoi_hoc(self, df_svthihk):
                conditions = ['SV đã thôi học', 'SV rút HP', 'SV tạm ngừng học']
                return df_svthihk[~df_svthihk['Ghi chú'].str.contains('|'.join(conditions), case=False, na=False)]
        def show_result_SV_thoi_hoc(self):
                
                self.textEdit.clear()
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                self.df_svthihkTH=self.process_sv_thoi_hoc(self.df_svthihk)
                # Hiển thị kết quả
                conditions = ['SV đã thôi học', 'SV rút HP', 'SV tạm ngừng học']
                sv_loai_bo = self.df_svthihk[self.df_svthihk['Ghi chú'].str.contains('|'.join(conditions), case=False, na=False)]

                #
                self.textEdit.insertPlainText(f"Tổng số sinh viên thôi học, tạm ngừng học, rút học phần đã được lọc: {len(sv_loai_bo)}\n")
                self.textEdit.insertPlainText("Danh sách sinh viên thôi học, tạm ngừng học, rút học phần:\n")
                stt=1
                for index, row in sv_loai_bo.iterrows():
                        self.textEdit.insertPlainText(f"{stt}. Mã sinh viên: {row['MSV']}\n")
                        stt+=1
        def save_data_svth(self):

                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihkTH is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiễn xử lý sinh viên thôi học") 
                        return
                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")
                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return
   
                # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihkTH.to_excel(file_path, index=False)


        def process_sv_mienTA(self,df_svthihk):
                condition = 'Miễn'
                return df_svthihk[~df_svthihk['HP miễn ngoại ngữ'].str.contains(condition, case=False, na=False)]
        def show_result_SV_mienTA(self):
                self.textEdit.clear()
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                self.df_svthihkmienTA=self.process_sv_mienTA(self.df_svthihk)
                # Hiển thị kết quả
                condition = 'Miễn'
                sv_loai_bo = self.df_svthihk[self.df_svthihk['HP miễn ngoại ngữ'].str.contains(condition, case=False, na=False)]

                #
                self.textEdit.insertPlainText(f"Tổng số sinh viên miễn học phần Tiếng Anh đã được lọc: {len(sv_loai_bo)}\n")
                self.textEdit.insertPlainText("Danh sách sinh viên miễn học phần Tiếng Anh:\n")
                stt = 1
                for index, row in sv_loai_bo.iterrows():
                        self.textEdit.insertPlainText(f"{stt}. Mã sinh viên: {row['MSV']}, Mã học phần: {row['Mã học phần']}\n")
                        stt += 1
        def save_data_svmienTA(self):
                # Kiểm tra xem df_sv2ct và df_2 đã được khởi tạo chưa
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihkmienTA is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiện xử lý sinh viên miễn điểm Tiếng Anh")
                        return
                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")

                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return
                
                # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihkmienTA.to_excel(file_path, index=False)


        def process_HPTA(self, df_svthihk):
                df_svthihk['Mã học phần mở rộng']=df_svthihk['Mã học phần'].copy()
                for index, row in df_svthihk.iterrows():
                        if isinstance(row['Đề thi TA'], str) and 'x' in row['Đề thi TA']:
                                if not row['Mã học phần mở rộng'].endswith('_Anh'):
                                        df_svthihk.at[index, 'Mã học phần mở rộng'] += '_Anh'
                                
                return df_svthihk
        def process_HPTA_HPTT(self,df_svthihk,df_hptt):
                df_svthihk['Mã học phần mở rộng']=df_svthihk['Mã học phần'].copy()
                mhp_old = set(df_hptt['Mã học phần'])
                # Tạo từ điển mapping giữa mã học phần cũ và mã học phần thay thế
                mhptt_mapping = dict(zip(df_hptt['Mã học phần'], df_hptt['Mã học phần thay thế']))
                # Tạo danh sách các mã học phần ở df1 trùng với mã học phần cũ
                conditon = df_svthihk['Mã học phần'].isin(mhp_old)
                # Cập nhật vào cột Ghi chú ở df1 
                df_svthihk.loc[conditon, 'Ghi chú'] = df_svthihk.loc[conditon, 'Mã học phần'].map(lambda x: f"Mã học phần cũ: {x}")
                # Cập nhật trong cột Mã học phần ở df1
                df_svthihk['Mã học phần mở rộng'] = df_svthihk['Mã học phần'].apply(lambda x: mhptt_mapping[x] if x in mhp_old else x)
                #
                for index, row in df_svthihk.iterrows():
                        if isinstance(row['Đề thi TA'], str) and 'x' in row['Đề thi TA']:
                                if not row['Mã học phần mở rộng'].endswith('_Anh'):
                                        df_svthihk.at[index, 'Mã học phần mở rộng'] += '_Anh'
                
                return df_svthihk
        def show_result_process_HPTA(self):
                self.textEdit.clear()
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return 

                self.df_svthihkHPTA=self.process_HPTA(self.df_svthihk)
                # Tính tổng số mã học phần thi Tiếng Anh
                
                unique_values = self.df_svthihk[self.df_svthihk['Mã học phần mở rộng'].str.endswith("Anh")]['Mã học phần mở rộng'].unique()
                # msv_values = len(df_1[df_1['Mã học phần'].str.endswith("Anh")]['MSV'].unique())
                total_hpta_anh = len(unique_values)
                
                # In ra tổng số mã học phần thi Tiếng Anh
                self.textEdit.insertPlainText(f"Tổng số mã học phần thi Tiếng Anh đã được xử lý: {total_hpta_anh}\n")
                
                
                # In ra danh sách mã học phần thi Tiếng Anh
                self.textEdit.insertPlainText("Danh sách mã học phần thi Tiếng Anh đã được xử lý:\n")
                stt = 1

                for hpt_new in unique_values:
                        hpt_new = hpt_new.replace("_Anh_Anh", "_Anh")
                        self.textEdit.insertPlainText(f"{stt}. Mã học phần mới: {hpt_new}\n")
                        stt += 1
        def save_data_hpta(self):
                # Kiểm tra xem df_sv2ct và df_2 đã được khởi tạo chưa
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihkHPTA is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiện xử lý học phần Tiếng Anh")
                        return
                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")

                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return

                # # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihkHPTA.to_excel(file_path, index=False)

        def show_result_CBDL(self):
                self.textEdit.clear() 
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                self.df_svthihk_processed = self.df_svthihk.copy()
                self.df_svthihk_processed=self.process_HPTA_HPTT(self.df_svthihk_processed, self.df_hptt)
                self.df_svthihk_processed=self.process_SV_2_CT(self.df_svthihk_processed, self.df_sv2ct)
                self.df_svthihk_processed=self.XLTL(self.df_svthihk_processed)
                self.df_svthihk_processed=self.process_sv_mienTA(self.df_svthihk_processed)
                self.df_svthihk_processed=self.process_sv_thoi_hoc(self.df_svthihk_processed)
                # Tính tổng số mã học phần thi Tiếng Anh
                conditions_ruthp = ['SV đã thôi học', 'SV rút HP', 'SV tạm ngừng học']
                conditions_mienTA = 'Miễn'
                
                self.df_sv2ct['MSV_CT1'] = self.df_sv2ct['MSV_CT1'].fillna(0).astype(int)
                msv_ct1_values = self.df_sv2ct[self.df_sv2ct['MSV_CT1'] != 0]['MSV_CT1'].tolist()
                msv_len=len(msv_ct1_values)
                
                mhp_old = self.df_hptt['Mã học phần'].tolist()
                mhp_old_len=len(mhp_old)

                unique_values_hpta = self.df_svthihk_processed[self.df_svthihk_processed['Mã học phần mở rộng'].str.endswith("Anh")]['Mã học phần mở rộng'].unique()
                
                sv_mienTA = self.df_svthihk[self.df_svthihk['HP miễn ngoại ngữ'].str.contains(conditions_mienTA, case=False, na=False)]
                
                sv_ruthp = self.df_svthihk[self.df_svthihk['Ghi chú'].str.contains('|'.join(conditions_ruthp), case=False, na=False)]
                # msv_values = len(df_1[df_1['Mã học phần'].str.endswith("Anh")]['MSV'].unique())
                total_hpta_anh = len(unique_values_hpta)
        
                
                # In ra tổng số mã học phần thi Tiếng Anh
                self.textEdit.insertPlainText(f"Tổng số học phần thay thế đã được xử lý: {mhp_old_len}\n")
                
                self.textEdit.insertPlainText(f"Tổng số sinh viên học 2 chương trình đã được xử lý: {msv_len}\n")
                
                self.textEdit.insertPlainText(f"Tổng số mã học phần thi Tiếng Anh đã được xử lý: {total_hpta_anh}\n")     
                
                self.textEdit.insertPlainText(f"Tổng số sinh viên miễn học phần Tiếng Anh đã được lọc: {len(sv_mienTA)}\n")   
                #
                self.textEdit.insertPlainText(f"Tổng số sinh viên thôi học, tạm ngừng học, rút học phần đã được lọc: {len(sv_ruthp)}\n")

        def save_data_CBDL(self):
                # Kiểm tra xem df_sv2ct và df_2 đã được khởi tạo chưa
                if self.df_svthihk is None:
                        QMessageBox.warning(None, "Lỗi", "Dữ liệu chưa được tải")
                        return
                elif self.df_svthihk_processed is None:
                        QMessageBox.warning(None, "Lỗi", "Chưa thực hiện chuẩn bị dữ liệu")
                        return

                
                # Mở hộp thoại để chọn vị trí lưu file
                file_dialog = QFileDialog()
                file_path, _ = file_dialog.getSaveFileName(None, "Lưu file", "", "Excel Files (*.xlsx *.xls)")
                if not file_path:  # Kiểm tra nếu người dùng không chọn vị trí lưu file
                        QMessageBox.warning(self, "Lỗi", "Bạn chưa chọn vị trí để lưu tập tin. Vui lòng chọn một vị trí để lưu.")
                        return
                # Lưu dữ liệu đã xử lý ra file Excel
                self.df_svthihk_processed.to_excel(file_path, index=False)
                QMessageBox.information(None, "Thành công", "Dữ liệu đã được lưu thành công")

import resources


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
